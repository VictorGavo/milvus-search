import configparser
import openai
from openai import OpenAI

config = configparser.ConfigParser()
config.read('config.ini')
open_api_key = config.get('openai', 'api_key')
openai.api_key = open_api_key

def generate_text_embeddings(text):
    """
    Generate embeddings for the given text using OpenAI's API.

    Parameters:
    - text (str): Text to generate embeddings for.

    Returns:
    - Embedding vector.
    """

    response = openai.embeddings.create(
        input=text,
        model="text-embedding-3-small"
    )

    return response.data[0].embedding

def call_gpt_for_summary(text):
    """
    Calls the OpenAI API to generate a summary for the provided text.

    Parameters:
    - text (str): The text to be summarized.

    Returns:
    - str: A summary of the provided text, as generated by the GPT-3.5 model.
    """
    response = openai.completions.create(
        model="gpt-3.5-turbo-instruct",
        prompt="Summarize the following text: " + text,
        max_tokens=150
    )
    return response.choices[0].text.strip()

def call_gpt_for_conversation(message, context):
    """
    Generates a conversational response from GPT-3.5 based on a given message and context.

    Parameters:
    - message (str): The user's message or question.
    - context (str): The conversational context or previous dialogue history.

    Returns:
    - str: The AI-generated response to the user's message within the given context.
    """
    full_prompt = f"{context}\n\nUser asks: {message}\nAI:"
    response = openai.completions.create(
        model="gpt-3.5-turbo-instruct",
        prompt=full_prompt,
        max_tokens=150
    )
    return response.choices[0].text.strip()